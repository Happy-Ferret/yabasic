#!/usr/bin/ruby

require 'pp'
require 'fileutils'
include FileUtils
require 'erb'
require 'find'

desc 'Check git'
task :git do 
  sh "/usr/bin/git diff --exit-code --quiet" do |ok,res|
    if !ok
      sh "git status"
      warn "Uncommited local changes, please fix with 'git add' etc."
    end
  end
end

version = nil
desc 'Update versions'
task :version => :git do
  version = File.read('../windows/resources/yabver.txt').chomp.strip
  puts "Version #{version}"
end

desc 'Check and edit changelog'
edit_files = Array.new
version_files = %w( content_log.html content_whatsnew.html )
task :changelog => :version do
  version_files.each do |name|
    edit_files << name unless File.new(name).read.include?(version)
  end
  if edit_files.length > 0
    sh "emacs -nw #{edit_files.join(' ')} ../unix/lang/NEWS"
    version_files.each do |name|
      fail "File #{name} still does not contain version" unless File.new(name).read.include?(version)
    end
  end
end

desc 'Process erb templates'

# colors from https://color.adobe.com
# Tests with browserstack.com

colors_legacy = { :toc_bg => "#FFBD7C",
                  :head_bg => "#79BD8F",
                  :head_biggest => "#00A388",
                  :head_small => "#46573B",
                  :head_bigger => "#46573B"}

colors_blueish = { :toc_bg => "#29D9C2",
                   :head_bg => "#01AEB2",
                   :head_biggest => "#29D9C2",
                   :head_small => "#FFFFA6",
                   :head_bigger => "#FFFFA6"}

colors = colors_blueish

task :templates => :changelog do
  %w( content_download.html.erb  head.html.erb toc.html.erb ).each do |name|
    result = name.chomp('.erb')
    File.open(result,'w') do |file|
      file.write ERB.new(File.read(name)).result(binding)
    end
  end

  structure=File.read('structure.html.erb')
  %w( index.html download.html whatsnew.html support.html screenshots.html copyright.html related.html faq.html history.html log.html manual_yabasic.html new_docu.html old_docu.html mit.html ).each do |name|
    if name == 'manual_yabasic.html'
      frame_html = 'yabasic.htm'
    elsif name == 'index.html'
      frame_html = 'content_whatsnew.html'
    else
      frame_html = "content_#{name}"
    end
    
    puts "#{name} wraps #{frame_html}"
    File.open(name,'w') do |file|
      file.write ERB.new(structure).result(binding)
    end
  end
end

desc 'Copy content'
task :copy => :templates do
  todir = '../products/web'
  rm_rf todir if File.exists?(todir)
  cp_r '../web','../products'
  Dir["#{todir}/*.erb"].each do |file|
    rm file
  end
  rm "#{todir}/Rakefile"
  rm "#{todir}/.gitignore"
  download = "#{todir}/download"
  rm_rf download if File.exists?(download)
  mkdir download
  %w( *.gz *.deb *.rpm *.exe ).each do |glob|
    Dir["../products/#{glob}"].each do |file|
      cp file, download
    end
  end
  cp '../products/yabasic.htm', todir
end

desc 'Remove generated html-files'
task :remove => :copy do
  Dir["*.html"].each do |file|
    rm file if File.exists?(file + ".erb")
  end
end

desc 'Invoke site'
task :default => :remove do
end
